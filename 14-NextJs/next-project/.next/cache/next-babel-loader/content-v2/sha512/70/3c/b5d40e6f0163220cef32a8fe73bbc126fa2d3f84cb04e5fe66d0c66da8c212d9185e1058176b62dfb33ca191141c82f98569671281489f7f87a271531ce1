{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/anthonyhadwan/code/AnthonyHad/udemy-react/14-NextJs/next-project/pages/index.js\";\nimport MeetupList from '../components/meetups/MeetupList'; // const DUMMY_MEETUPS = [\n//   {\n//     id: 'm1',\n//     title: 'A First Meetup',\n//     image:\n//       'https://upload.wikimedia.org/wikipedia/commons/4/4b/La_Tour_Eiffel_vue_de_la_Tour_Saint-Jacques%2C_Paris_ao%C3%BBt_2014_%282%29.jpg',\n//     address: 'Rue de la Bourse, 75001, Paris',\n//     description: 'our first french BTC meetup',\n//   },\n//   {\n//     id: 'm2',\n//     title: 'A Second Meetup',\n//     image:\n//       'https://upload.wikimedia.org/wikipedia/commons/4/4b/La_Tour_Eiffel_vue_de_la_Tour_Saint-Jacques%2C_Paris_ao%C3%BBt_2014_%282%29.jpg',\n//     address: 'Rue de la Liberté, 75001, Paris',\n//     description: 'our second french BTC meetup',\n//   },\n// ];\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   //send http request and fetch\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n} // export async function getServerSideProps(context) {\n//   // similar to Node JS we have access to req and response objects\n//   //can be a disadvantage if we want to wait for every request\n//   const req = context.req;\n//   const res = context.res;\n//   //code will always run on the server\n//   // we can run operation on credentials\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n//only works in page component files\n//gets called before calling the component function\n//next Js would wait for the data to be loaded and with that we'd load data with the required data\n//can run code which is run on a server, it will never end up on the client side, it's executed during the\n//build process\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/anthonyhadwan/code/AnthonyHad/udemy-react/14-NextJs/next-project/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;AAEA,OAAOA,UAAP,MAAuB,kCAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA;AACA;AACA;AACA;AAEA,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;KA7BSF,Q;;AAwDT,eAAeA,QAAf","sourcesContent":["import { MongoClient } from 'mongodb';\n\nimport MeetupList from '../components/meetups/MeetupList';\n\n// const DUMMY_MEETUPS = [\n//   {\n//     id: 'm1',\n//     title: 'A First Meetup',\n//     image:\n//       'https://upload.wikimedia.org/wikipedia/commons/4/4b/La_Tour_Eiffel_vue_de_la_Tour_Saint-Jacques%2C_Paris_ao%C3%BBt_2014_%282%29.jpg',\n//     address: 'Rue de la Bourse, 75001, Paris',\n//     description: 'our first french BTC meetup',\n//   },\n//   {\n//     id: 'm2',\n//     title: 'A Second Meetup',\n//     image:\n//       'https://upload.wikimedia.org/wikipedia/commons/4/4b/La_Tour_Eiffel_vue_de_la_Tour_Saint-Jacques%2C_Paris_ao%C3%BBt_2014_%282%29.jpg',\n//     address: 'Rue de la Liberté, 75001, Paris',\n//     description: 'our second french BTC meetup',\n//   },\n// ];\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   //send http request and fetch\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n\n  return <MeetupList meetups={props.meetups} />;\n}\n\n// export async function getServerSideProps(context) {\n//   // similar to Node JS we have access to req and response objects\n//   //can be a disadvantage if we want to wait for every request\n//   const req = context.req;\n//   const res = context.res;\n//   //code will always run on the server\n//   // we can run operation on credentials\n\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n\n//only works in page component files\n//gets called before calling the component function\n//next Js would wait for the data to be loaded and with that we'd load data with the required data\n//can run code which is run on a server, it will never end up on the client side, it's executed during the\n//build process\nexport async function getStaticProps() {\n  //fetch data from API, file system\n  const client = await MongoClient.connect();\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  client.close();\n\n  //awlays need to return an object\n  //issue that we can have here is that if the data changes we would see outdated data unless we rebuild/redeploy\n  //good use case for personal blog for example unless we add the revalidate property unlocking Incremental Static Generation\n  return {\n    props: {\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString(),\n      })),\n    },\n    revalidate: 1, // will regenerate the page every 10 seconds (but sometimes it's not enough we want to regenerate every request)\n  };\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}