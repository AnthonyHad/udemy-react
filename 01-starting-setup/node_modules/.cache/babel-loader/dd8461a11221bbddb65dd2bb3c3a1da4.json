{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyhadwan/code/AnthonyHad/udemy-react/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  const [collapsedState, setCollapseState] = useState(false); // When using '1' state for all we have to update all inputs all together\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: '',\n  // });\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value); //When state is updated React will not merge the old one with the new one,\n    //it will simply replace it\n    // setUserInput({\n    //   // enteredAmount: '',\n    //   // enteredDate: '',\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n    // using the below approach guarantees we have the latest state from React\n    // To be used whenever we have to update a state which depends on the one befores\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //   // enteredTitle: '',\n    //   // enteredDate: '',\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value); // setUserInput({\n    //   // enteredTitle: '',\n    //   // enteredAmount: '',\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n  };\n\n  const collapseFormHandler = () => {\n    console.log('collapsed!');\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(true);\n  };\n\n  const ExpandFormHandler = () => {\n    console.log('Expanded!');\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(false);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData); //two way binding cf value attribute inside inputs\n\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(true);\n  };\n\n  if (collapsedState === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: ExpandFormHandler,\n        children: \"New Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new_expense__actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: collapseFormHandler,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"AlQhGZcZX9utM5IN+K8909N/W0I=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","collapsedState","setCollapseState","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","collapseFormHandler","console","log","ExpandFormHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"sources":["/Users/anthonyhadwan/code/AnthonyHad/udemy-react/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import { useState } from 'react';\n\nimport './ExpenseForm.css';\n\nconst ExpenseForm = (props) => {\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  const [collapsedState, setCollapseState] = useState(false);\n\n  // When using '1' state for all we have to update all inputs all together\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: '',\n  // });\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n\n    //When state is updated React will not merge the old one with the new one,\n    //it will simply replace it\n    // setUserInput({\n    //   // enteredAmount: '',\n    //   // enteredDate: '',\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n\n    // using the below approach guarantees we have the latest state from React\n    // To be used whenever we have to update a state which depends on the one befores\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n    // setUserInput({\n    //   // enteredTitle: '',\n    //   // enteredDate: '',\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    // });\n  };\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    //   // enteredTitle: '',\n    //   // enteredAmount: '',\n    //   ...userInput,\n    //   enteredDate: event.target.value,\n    // });\n  };\n\n  const collapseFormHandler = () => {\n    console.log('collapsed!');\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(true);\n  };\n\n  const ExpandFormHandler = () => {\n    console.log('Expanded!');\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(false);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n    props.onSaveExpenseData(expenseData);\n    //two way binding cf value attribute inside inputs\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n    setCollapseState(true);\n  };\n\n  if (collapsedState === true) {\n    return (\n      <div className=\"new_expense__actions\">\n        <button onClick={ExpandFormHandler}>New Expense</button>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new_expense__actions\">\n        <button onClick={collapseFormHandler}>Cancel</button>\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}